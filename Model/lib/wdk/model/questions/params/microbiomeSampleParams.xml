<?xml version="1.0" encoding="utf-8"?>
<wdkModel>

  <!-- notes

     - should ms_assay param be a controlled vocab pulled from the database?

  -->

  <paramSet name="sampleParams">

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
  
      <datasetParam name="sample_id" prompt="Sample ID" 
                      recordClassRef="SampleRecordClasses.MicrobiomeSampleRecordClass" >
            <help>Input a comma delimited set of  Sample IDs, or upload a file. Wildcards (*) are allowed.</help>
             <suggest 
                     default="EUSMPL0020-1-26"/>
          </datasetParam>

       <flatVocabParam name="metadata_datasets"
                     queryRef="samplesVQ.MicrobiomeDatasets"
                     prompt="Dataset"
                     quote="true"
                     visible="true"
                     multiPick="true">
            <help>Choose an Experiment</help> 
            <suggest selectMode="all" />
       </flatVocabParam>


       <filterParam name="env_feature_filter"  
                      metadataQueryRef="samplesVQ.EnvFeatureMetadata"
                      backgroundQueryRef="samplesVQ.EnvFeatureMetadata"
                      ontologyQueryRef="samplesVQ.EnvFeatureOntology"
                      prompt="Samples"
                      countPredictsAnswerCount="true"
                      trimMetadataTerms="false"
                      dependedParamRef="">
         <help>
              Select reference samples. 
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

       <filterParam name="datasets_filter"  
                      metadataQueryRef="samplesVQ.DatasetMetaData"
                      backgroundQueryRef="samplesVQ.DatasetMetaDataBkg"
                      ontologyQueryRef="samplesVQ.DatasetOntology"
                      prompt="Samples"
                      countPredictsAnswerCount="true"
                      trimMetadataTerms="false"
                      dependedParamRef="sampleParams.env_feature_filter">
         <help>
              Select reference samples. 
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

       <filterParam name="samples_taxon_wiz"  
                      metadataQueryRef="samplesVQ.SamplesTaxonWiz"
                      backgroundQueryRef="samplesVQ.SamplesTaxonBkgWiz"
                      ontologyQueryRef="samplesVQ.TaxonOntology"
                      prompt="Samples"
                      countPredictsAnswerCount="true"
                      trimMetadataTerms="true"
                      dependedParamRef="sampleParams.datasets_filter">
         <help>
              Select reference samples. 
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

       <filterParam name="samples_filter_metadata_wiz"  
                      metadataQueryRef="samplesVQ.SamplesMetadataWiz"
                      backgroundQueryRef="samplesVQ.SamplesMetadataWizBkg" 
                      ontologyQueryRef="samplesVQ.MetadataOntology"
                      prompt="Samples"
                      countPredictsAnswerCount="true"
                      trimMetadataTerms="true"
                      dependedParamRef="sampleParams.datasets_filter,sampleParams.env_feature_filter">
         <help>
              Select reference samples. 
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

       <filterParam name="samples_filter_metadata"  
                      metadataQueryRef="samplesVQ.SamplesMetadata"
                      backgroundQueryRef="samplesVQ.SamplesMetadata"
                      ontologyQueryRef="samplesVQ.MetadataSpec"
                      prompt="Samples"
                      dependedParamRef="sampleParams.metadata_datasets">
         <help>
              Select reference samples. 
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

       <filterParam name="samples_filter_taxon"  
                      metadataQueryRef="samplesVQ.SamplesTaxon"
                      backgroundQueryRef="samplesVQ.SamplesTaxonBkg"
                      ontologyQueryRef="samplesVQ.SamplesTaxonOntology"
                      prompt="Samples"
                      countPredictsAnswerCount="true"
                      trimMetadataTerms="true"
                      dependedParamRef="sampleParams.metadata_datasets">
         <help>
              Select reference samples. 
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

      <!-- TEMPLATE_ANCHOR sampleMetadataParamsWithClinepi -->

  </paramSet>

  <querySet name="samplesVQ" queryType="vocab" isCacheable="true">


      <!-- TEMPLATE_ANCHOR sampleMetadataDatasetsParamQuery -->

      <!-- TEMPLATE_ANCHOR sampleMetadataParamQueriessWithClinepi -->


       <sqlQuery name="MicrobiomeDatasets">
             <column name="internal"/>
             <column name="term"/>
             <column name="display"/>
          <sql>
             select distinct dsp.name AS internal, dsp.dataset_presenter_id as term,
                    display_name AS display
             from apidbTuning.DatasetPresenter dsp
             where dsp.name like 'otu_%_RSRC'
             order by display_name asc
          </sql>
        </sqlQuery>




        <sqlQuery name="EnvFeatureOntology" doNotTest="1" > 
            <column name="ontology_term_name"/>
            <column name="parent_ontology_term_name"/>
            <column name="display_name"/>
            <column name="description"/>
            <column name="type"/>
            <column name="units"/>
            <column name="precision"/>
            <column name="is_range"/>
            <sql>
              <![CDATA[
                       select 'MiXS_env_feature' AS ontology_term_name,
                       'dummyEnv' as parent_ontology_term_name,
                       'Habitat' as display_name, 'Habitat where the sample was collected' as description, 'string' as type, 
                       cast(null as varchar2(1)) as units,
                       1 as precision, 0 as is_range
                       from dual
                       union
                       select 'dummyEnv' as ontology_term_name, null as parent_ontology_term_name, 'Environmental feature' as display_name, null as description,  null as type, null as units,
                       null as precision, 0 as is_range from dual
              ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="EnvFeatureMetadata" doNotTest="1"  isCacheable="false">
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
select sds.output_pan_id as internal, 'MiXS_env_feature' as ontology_term_name, 
                     cast(null as number) as number_value, cast(null as date) as date_value, MiXS_env_feature as string_value
                     from apidbtuning.samples s, apidbTuning.SampleProcess sds
                     where sds.OUTPUT_ISA_TYPE = 'Data'
                   AND s.pan_id = sds.protocol_app_node_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="DatasetOntology" doNotTest="1" > 
            <column name="ontology_term_name"/>
            <column name="parent_ontology_term_name"/>
            <column name="display_name"/>
            <column name="description"/>
            <column name="type"/>
            <column name="units"/>
            <column name="precision"/>
            <column name="is_range"/>
            <sql>
              <![CDATA[
                       select 'IAO_0000100' AS ontology_term_name,
                       'dummyDatasetParent' as parent_ontology_term_name,
                       'Dataset' as display_name, 'Study name' as description, 'string' as type, 
                       cast(null as varchar2(1)) as units,
                       1 as precision, 0 as is_range
                       from dual
                       union
                       select 'dummyDatasetParent' as ontology_term_name, null as parent_ontology_term_name, 'Data item' as display_name, null as description,  null as type, null as units,
                       null as precision, 0 as is_range from dual
              ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="DatasetMetaData" doNotTest="1"  isCacheable="false">
          <paramRef ref="sampleParams.env_feature_filter"/>
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
                     select distinct pan_id as internal, property_source_id as ontology_term_name, 
                     number_value, date_value, string_value 
                     from apidbtuning.metadata
                     where property_source_id = 'IAO_0000100'
                     and pan_id in ($$env_feature_filter$$)
                     and dataset_name like 'otu_%_RSRC'
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="DatasetMetaDataBkg" doNotTest="1"  isCacheable="false">
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
                     select distinct pan_id as internal, property_source_id as ontology_term_name, 
                     number_value, date_value, string_value 
                     from apidbtuning.metadata
                     where property_source_id = 'IAO_0000100'
                     and dataset_name like 'otu_%_RSRC'
            ]]>
            </sql>
        </sqlQuery>


        <!-- NOTE:  this ontology query filters the terms based on a depended param -->
        
        <sqlQuery name="MetadataOntology" doNotTest="1" isCacheable="false"> 
          <paramRef ref="sampleParams.datasets_filter"/>
          <paramRef ref="sampleParams.env_feature_filter"/>
          <column name="ontology_term_name"/>
          <column name="parent_ontology_term_name"/>
          <column name="display_name"/>
          <column name="description"/>
          <column name="type"/>
          <column name="units"/>
          <column name="precision"/>
          <column name="is_range"/>
          <sql>
            <![CDATA[
select * from (
select distinct ontology_term_source_id as ontology_term_name, parent_ontology_term_source_id as parent_ontology_term_name, display_name,
                     description, type, units, precision, is_range 
                     from apidbTuning.Ontology
                       CONNECT BY ontology_term_source_id = PRIOR parent_ontology_term_source_id
                       START WITH ontology_term_source_id in (
                         select distinct property_source_id 
                         from apidbtuning.metadata
                         where pan_id in ($$datasets_filter$$ INTERSECT $$env_feature_filter$$)
                         )
                         ) where ontology_term_name not in ('MiXS_env_feature','IAO_0000100','EUPATH_0000606','MICRO_0000494','OBI_0001898')
                     order by display_name
            ]]>
          </sql>
        </sqlQuery>

        <sqlQuery name="SamplesMetadataWiz" doNotTest="1" isCacheable="false">
          <paramRef ref="sampleParams.datasets_filter"/>
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
                     select distinct pan_id as internal, property_source_id as ontology_term_name, string_value,number_value,date_value 
                     from apidbtuning.metadata
                     where pan_id in ($$datasets_filter$$)
                     and dataset_name like 'otu_%_RSRC'
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="SamplesMetadataWizBkg" doNotTest="1" isCacheable="false">
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
                     select distinct pan_id as internal, property_source_id as ontology_term_name, string_value,number_value,date_value 
                     from apidbtuning.metadata
                     where dataset_name like 'otu_%_RSRC'
            ]]>
            </sql>
        </sqlQuery>
        <sqlQuery name="TaxonOntology" doNotTest="1" > 
            <column name="ontology_term_name"/>
            <column name="parent_ontology_term_name"/>
            <column name="display_name"/>
            <column name="description"/>
            <column name="type"/>
            <column name="units"/>
            <column name="precision"/>
            <column name="is_range"/>
            <sql>
              <![CDATA[
             select distinct -- unneeded only because of UNION
                         category as ontology_term_name,
                         cast(null as varchar2(1)) as parent_ontology_term_name,
                         category as display_name,
                         'taxonomic rank' as description,
                         cast(null as varchar2(1)) as type, cast(null as varchar2(1)) as units,
                         1 as precision, 0 as is_range,
                         taxon_level * 2 - 1 as ordering
                  from apidbTuning.TaxonAbundance
                union
                  select category || ':' || term as ontology_term_name,
                         category as parent_ontology_term_name,
                         term as display_name,
                         cast(null as varchar2(1)) as description,
                         'number' as type, null as units, 1 as precision, 1 as is_range,
                         taxon_level * 2 as ordering
                  from apidbTuning.TaxonAbundance
                  order by ordering, display_name
              ]]>
            </sql>
        </sqlQuery>



        <sqlQuery name="SamplesTaxonOntology" doNotTest="1" > 
            <paramRef ref="sampleParams.metadata_datasets"/>
            <column name="ontology_term_name"/>
            <column name="parent_ontology_term_name"/>
            <column name="display_name"/>
            <column name="description"/>
            <column name="type"/>
            <column name="units"/>
            <column name="precision"/>
            <column name="is_range"/>
            <sql>
              <![CDATA[
             select distinct -- unneeded only because of UNION
                         category as ontology_term_name,
                         cast(null as varchar2(1)) as parent_ontology_term_name,
                         category as display_name,
                         'taxonomic rank' as description,
                         cast(null as varchar2(1)) as type, cast(null as varchar2(1)) as units,
                         1 as precision, 0 as is_range,
                         taxon_level * 2 - 1 as ordering
                  from apidbTuning.TaxonAbundance
                  where dataset_name = $$metadata_datasets$$
                union
                  select category || ':' || term as ontology_term_name,
                         category as parent_ontology_term_name,
                         term as display_name,
                         cast(null as varchar2(1)) as description,
                         'number' as type, null as units, 1 as precision, 1 as is_range,
                         taxon_level * 2 as ordering
                  from apidbTuning.TaxonAbundance
                  where dataset_name = $$metadata_datasets$$
                  order by ordering, display_name
              ]]>
            </sql>
        </sqlQuery>



        <sqlQuery name="SamplesTaxon" doNotTest="1"  isCacheable="false">
          <paramRef ref="sampleParams.metadata_datasets"/>
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
                     select protocol_app_node_id as internal,
                     category || ':' || term as ontology_term_name,
                     cast(value as number) as number_value,
                     cast(null as date) as date_value,
                     cast(null as varchar2(1)) as string_value
                     from apidbTuning.TaxonAbundance
                     where dataset_name = $$metadata_datasets$$
            ]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="SamplesTaxonWiz" doNotTest="1"  isCacheable="false">
          <paramRef ref="sampleParams.datasets_filter"/>
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
                     select protocol_app_node_id as internal,
                     category || ':' || term as ontology_term_name,
                     cast(value as number) as number_value,
                     cast(null as date) as date_value,
                     cast(null as varchar2(1)) as string_value
                     from apidbTuning.TaxonAbundance
                     where protocol_app_node_id in ($$datasets_filter$$)
            ]]>
            </sql>
        </sqlQuery>


<!-- TODO duplicate of SamplesTaxon, delete me -->
        <sqlQuery name="SamplesTaxonBkg" doNotTest="1"  isCacheable="false">
          <paramRef ref="sampleParams.metadata_datasets"/>
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
                     select protocol_app_node_id as internal,
                     category || ':' || term as ontology_term_name,
                     cast(value as number) as number_value,
                     cast(null as date) as date_value,
                     cast(null as varchar2(1)) as string_value
                     from apidbTuning.TaxonAbundance
                     where dataset_name = $$metadata_datasets$$
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="SamplesTaxonBkgWiz" doNotTest="1"  isCacheable="false">
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
                     select protocol_app_node_id as internal,
                     category || ':' || term as ontology_term_name,
                     cast(value as number) as number_value,
                     cast(null as date) as date_value,
                     cast(null as varchar2(1)) as string_value
                     from apidbTuning.TaxonAbundance
            ]]>
            </sql>
        </sqlQuery>

    <sqlQuery name="SamplesTaxonSpec" doNotTest="1" > 
            <column name="ontology_term_name"/>
            <column name="parent_ontology_term_name"/>
            <column name="display_name"/>
            <column name="description"/>
            <column name="type"/>
            <column name="units"/>
            <column name="precision"/>
            <column name="is_range"/>
            <sql>
              <![CDATA[
             select 'dummyDataSource' as ontology_term_name, null as parent_ontology_term_name, 'Data source' as display_name, null as description,  null as type, null as units,
             null as precision, 0 as is_range, -1 as ordering from dual
             UNION
             select 'dataset' AS ontology_term_name,
             'dummyDataSource' as parent_ontology_term_name,
             'Dataset' as display_name, 'Study name' as description, 'string' as type, 
             cast(null as varchar2(1)) as units,
             1 as precision, 0 as is_range,
             0 as ordering
             from dual
             UNION
             select 'Taxonomy' ontology_term_name,
             'dummyDataSource' as parent_ontology_term_name,
             'Taxonomy' as display_name, 'Taxonomy' as description, cast(null as varchar2(1)) as type, 
             cast(null as varchar2(1)) as units,
             1 as precision, 0 as is_range,
             0.5 as ordering
             from dual
             UNION
             select distinct -- unneeded only because of UNION
                         category as ontology_term_name,
                         'Taxonomy' as parent_ontology_term_name,
                         category as display_name,
                         'taxonomic rank' as description,
                         cast(null as varchar2(1)) as type, cast(null as varchar2(1)) as units,
                         1 as precision, 0 as is_range,
                         taxon_level * 2 - 1 as ordering
                  from apidbTuning.TaxonAbundance
                union
                  select category || ':' || term as ontology_term_name,
                         category as parent_ontology_term_name,
                         term as display_name,
                         cast(null as varchar2(1)) as description,
                         'number' as type, null as units, 1 as precision, 1 as is_range,
                         taxon_level * 2 as ordering
                  from apidbTuning.TaxonAbundance
                  order by ordering, display_name
              ]]>
            </sql>
        </sqlQuery>
        <sqlQuery name="SamplesMetadata" doNotTest="1">
          <paramRef ref="sampleParams.metadata_datasets"/>
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
            select md.pan_id as internal,
                   md.property as ontology_term_name,
                   cast(case
                          when pt.type = 'number' and apidb.is_number(md.value) = 1
                            then apidb.parse_and_round_number(md.value)
                          else null
                        end as number) as number_value,
                  case
                    when pt.type = 'string'
                      then md.value
                    else cast(null as varchar2(10))
                  end as string_value,
                  cast(case
                         when pt.type = 'date'
                           then apidb.parse_date(md.value)
                         else null
                       end as date) as date_value
               from (  select pan_id, property, value
                       from apidbtuning.InferredChars
                       where dataset_name in ($$metadata_datasets$$)
                     union
                       select pan_id, property, value
                       from apidbtuning.InferredParams
                       where dataset_name in ($$metadata_datasets$$)
                     union
                       select pan_id, property, value
                       from apidbtuning.DefaultChars
                       where dataset_name in ($$metadata_datasets$$)
                    ) md,
                    (select property, max(type) as type
                     from apidbTuning.PropertyType
                     group by property) pt
               where pt.property = md.property
            ]]>
            </sql>
        </sqlQuery>

    <sqlQuery name="MetadataSpec" doNotTest="1">
            <paramRef ref="sampleParams.metadata_datasets"/>
            <column name="ontology_term_name"/>
            <column name="parent_ontology_term_name"/>
            <column name="display_name"/>
            <column name="description"/>
            <column name="type"/>
            <column name="units"/>
            <column name="precision"/>
            <column name="is_range"/>
            <sql>
              <![CDATA[
                select distinct ontology_term_name, parent_ontology_term_name, display_name,
                       description, type, units, precision, is_range
                from apidbTuning.Ontology
                where dataset_name in ($$metadata_datasets$$)
              ]]>
            </sql>
        </sqlQuery>


 
  </querySet>

  <groupSet name="microbiomeGroups">
    
    <group name="dataset" displayName="Dataset" displayType="ShowHide">
      <description>
        <![CDATA[
                 Choose the datasets you want to include in your search.
        ]]>
      </description>
    </group>

    <group name="env_feature" displayName="Habitat" displayType="ShowHide">
      <description>
        <![CDATA[
                 Choose the habitat where the sample you want to include in your search was isolated.
        ]]>
      </description>
    </group>

    <group name="samples_taxon" displayName="Samples" displayType="ShowHide">
      <description>
        <![CDATA[
                 Choose the taxa you want to include in your search.
        ]]>
      </description>
    </group>

    <group name="samples_metadata" displayName="Samples" displayType="ShowHide">
      <description>
        <![CDATA[
                 Choose the metadata characteristics you want to include in your search.
        ]]>
      </description>
    </group>

  </groupSet>

  <paramSet name="userDatasetParams">
    <flatVocabParam name="biom_datasets"
                    queryRef="biomDatasetVQ.UserDataset"
                    prompt="Your Dataset"
                    quote="false"
                    multiPick="false" >
         <help>A dataset that you have imported into your workspace as a BIOM file, and that is installed in @PROJECT_ID@ </help>
    </flatVocabParam>
  </paramSet>

  <querySet name="biomDatasetVQ" queryType="vocab" isCacheable="false">
        <sqlQuery name="UserDataset" isCacheable="false">
           <paramRef ref="InternalParams.user_id"/>
           <column name="internal"/>
           <column name="term"/>
           <column name="display"/>
           <sql>
           <![CDATA[
           select term, internal, display
           from (  
             select iud.user_dataset_id as term, iud.user_dataset_id as internal,
                  iud.name as display, 2 as ordering
             from apidbUserDatasets.InstalledUserDataset iud
             where iud.user_dataset_id
                 in (select udac.user_dataset_id
                     from apidbUserDatasets.UserDatasetAccessControl udac,
                          apidbUserDatasets.UD_ProfileSet ps,
                          apidbUserDatasets.UD_Sample s,
                          apidbUserDatasets.UD_Abundance a
                     where udac.user_id = $$user_id$$ -- enforce dataset access
                       and udac.user_dataset_id = ps.user_dataset_id
                       and ps.profile_set_id = s.profile_set_id
                       and s.sample_id = a.sample_id
                    )
             and (iud.is_invalid is null or iud.is_invalid = 0)
          ) order by ordering, display
             ]]>
           </sql>
        </sqlQuery>
  </querySet>

  <paramSet name="sampleParamsUser">
       <filterParam name="samples_filter_metadata_user"  
                      metadataQueryRef="samplesVQUser.SamplesMetadataUser"
                      backgroundQueryRef="samplesVQUser.SamplesMetadataUser"
                      ontologyQueryRef="samplesVQUser.SamplesMetadataOntologyUser"
                      prompt="Samples"
                      dependedParamRef="userDatasetParams.biom_datasets">
         <help>
              Select reference samples. 
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

       <filterParam name="samples_filter_taxon_user"  
                      metadataQueryRef="samplesVQUser.SamplesTaxonUser"
                      backgroundQueryRef="samplesVQUser.SamplesTaxonUser"
                      ontologyQueryRef="samplesVQUser.SamplesTaxonOntologyUser"
                      prompt="Samples"
                      countPredictsAnswerCount="true"
                      trimMetadataTerms="true"
                      dependedParamRef="userDatasetParams.biom_datasets">
         <help>
              Select reference samples. 
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

  </paramSet>


  <querySet name="samplesVQUser" queryType="vocab" isCacheable="false">

        <sqlQuery name="SamplesMetadataUser" doNotTest="1">
          <paramRef ref="userDatasetParams.biom_datasets"/>
          <column name="ontology_term_name"/>
          <column name="internal"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
            select sd.sample_id as internal,
                   pt.property as ontology_term_name,
                   sd.number_value,
                   sd.date_value,
                   sd.string_value
            from apidbUserDatasets.UD_ProfileSet ps,
                 apidbUserDatasets.UD_Property pt,
                 apidbUserDatasets.UD_SampleDetail sd
            where 
              ps.user_dataset_id in ($$biom_datasets$$)
              and ps.profile_set_id = pt.profile_set_id
              and pt.property_id = sd.property_id
            ]]>
            </sql>
        </sqlQuery>
        <sqlQuery name="SamplesMetadataOntologyUser" doNotTest="1">
            <paramRef ref="userDatasetParams.biom_datasets"/>
            <column name="ontology_term_name"/>
            <column name="parent_ontology_term_name"/>
            <column name="display_name"/>
            <column name="description"/>
            <column name="type"/>
            <column name="units"/>
            <column name="precision"/>
            <column name="is_range"/>
            <sql>
              <![CDATA[
                select distinct 
                   pt.parent_source_id as ontology_term_name,
                   cast(null as varchar2(1)) as parent_ontology_term_name,
                   pt.parent as display_name,
                   'property type' as description,
                   cast(null as varchar2(1)) as type,
                   cast(null as varchar2(1)) as units,
                   1 as precision,
                   0 as is_range
                 from apidbUserDatasets.UD_ProfileSet ps,
                      apidbUserDatasets.UD_Property pt
            where 
                  ps.user_dataset_id in ($$biom_datasets$$)
                  and ps.profile_set_id = pt.profile_set_id
                union
                select pt.property as ontology_term_name,
                       pt.parent_source_id as parent_ontology_term_name,
                       pt.property as display_name,
                       pt.property as description,
                       pt.type,
                       cast(null as varchar2(1)) units,
                       1 as precision,
                       DECODE(pt.filter, 'range', 1, 0) as is_range
                 from apidbUserDatasets.UD_ProfileSet ps,
                      apidbUserDatasets.UD_Property pt
            where 
                  ps.user_dataset_id in ($$biom_datasets$$)
                  and ps.profile_set_id = pt.profile_set_id
              ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="SamplesTaxonUser" doNotTest="1"  >
          <paramRef ref="userDatasetParams.biom_datasets"/>
          <column name="internal"/>
          <column name="ontology_term_name"/>
          <column name="number_value"/>
          <column name="date_value"/>
          <column name="string_value"/>
          <sql>
            <![CDATA[
            select aa.sample_id as internal,
                   aa.taxon_level_name || ':' || aa.taxon_name as ontology_term_name,
                   cast(aa.relative_abundance as number) as number_value,
                   cast(null as date) as date_value,
                   cast(null as varchar2(1)) as string_value
            from apidbUserDatasets.UD_ProfileSet ps,
                 apidbUserDatasets.UD_AggregatedAbundance aa
            where 
              ps.user_dataset_id in ($$biom_datasets$$)
              and ps.profile_set_id = aa.profile_set_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="SamplesTaxonOntologyUser" doNotTest="1" > 
            <paramRef ref="userDatasetParams.biom_datasets"/>
            <column name="ontology_term_name"/>
            <column name="parent_ontology_term_name"/>
            <column name="display_name"/>
            <column name="description"/>
            <column name="type"/>
            <column name="units"/>
            <column name="precision"/>
            <column name="is_range"/>
            <sql>
              <![CDATA[
            select distinct -- unneeded only because of UNION
                   aa.taxon_level_name as ontology_term_name,
                   cast(null as varchar2(1)) as parent_ontology_term_name,
                   INITCAP(aa.taxon_level_name) as display_name,
                   'taxonomic rank' as description,
                   cast(null as varchar2(1)) as type,
                   cast(null as varchar2(1)) as units,
                   1 as precision,
                   0 as is_range,
                   aa.taxon_level * 2 - 1 as ordering
            from apidbUserDatasets.UD_ProfileSet ps,
                 apidbUserDatasets.UD_AggregatedAbundance aa
            where 
              ps.user_dataset_id in ($$biom_datasets$$)
              and ps.profile_set_id = aa.profile_set_id
            union 
            select aa.taxon_level_name || ':' || aa.taxon_name as ontology_term_name,  
                   aa.taxon_level_name as parent_ontology_term_name,
                   aa.taxon_name as display_name,
                   cast(null as varchar2(1)) as description,
                   'number' as type,
                   cast(null as varchar2(1)) as units,
                   1 as precision,
                   1 as is_range,
                   aa.taxon_level * 2 as ordering
            from apidbUserDatasets.UD_ProfileSet ps,
                 apidbUserDatasets.UD_AggregatedAbundance aa
            where 
              ps.user_dataset_id in ($$biom_datasets$$)
              and ps.profile_set_id = aa.profile_set_id
            order by ordering, display_name
              ]]>
            </sql>
        </sqlQuery>

  </querySet>

</wdkModel>
